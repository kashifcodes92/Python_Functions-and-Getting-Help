{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Calling functions and defining our own, and using Python's builtin documentation","metadata":{}},{"cell_type":"markdown","source":"# Getting Help\n\nYou saw the abs function in the previous tutorial, but what if you've forgotten what it does?\n\nThe help() function is possibly the most important Python function you can learn. If you can remember how to use help(), you hold the key to understanding most other functions.\n\nHere is an example:","metadata":{}},{"cell_type":"code","source":"help(round)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"help() displays two things:\n1. the header of that function round(number, ndigits=None). In this case, this tells us that round() takes an argument we can describe as number. Additionally, we can optionally give a separate argument which could be described as ndigits.\n2. A brief English description of what the function does.","metadata":{}},{"cell_type":"markdown","source":"**Common pitfall:** when you're looking up a function, remember to pass in the name of the function itself, and not the result of calling that function.\n\nWhat happens if we invoke help on a call to the function round()? Unhide the output of the cell below to see.","metadata":{}},{"cell_type":"code","source":"help(round(-2.01))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Python evaluates an expression like this from the inside out. First it calculates the value of round(-2.01), then it provides help on the output of that expression.\n\n(And it turns out to have a lot to say about integers! After we talk later about objects, methods, and attributes in Python, the help output above will make more sense.)\n\nround is a very simple function with a short docstring. help shines even more when dealing with more complex, configurable functions like print. Don't worry if the following output looks inscrutable... for now, just see if you can pick anything new out from this help.","metadata":{}},{"cell_type":"code","source":"help(print)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"If you were looking for it, you might learn that print can take an argument called sep, and that this describes what we put between all the other arguments when we print them.","metadata":{}},{"cell_type":"markdown","source":"## Defining functions\n\nBuiltin functions are great, but we can only get so far with them before we need to start defining our own functions. Below is a simple example.","metadata":{}},{"cell_type":"code","source":"def least_difference(a, b, c):\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This creates a function called `least_difference`, which takes three arguments, a, b, and c.\n\nFunctions start with a header introduced by the `def` keyword. The indented block of code following the `:` is run when the function is called.\n\n`return` is another keyword uniquely associated with functions. When Python encounters a `return` statement, it exits the function <br>immediately, and passes the value on the right hand side to the calling context.\n\nIs it clear what `least_difference()` does from the source code? If we're not sure, we can always try it out on a few examples:","metadata":{}},{"cell_type":"code","source":"print(\n    least_difference(1, 10, 100),\n    least_difference(1, 10, 10),\n    least_difference(5, 6, 7), # Python allows trailing commas in argument lists. How nice is that?\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Or maybe the `help()` function can tell us something about it.","metadata":{}},{"cell_type":"code","source":"help(least_difference)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Python isn't smart enough to read my code and turn it into a nice English description. <br>However, when I write a function, I can provide a description in what's called the docstring.","metadata":{}},{"cell_type":"code","source":"def least_difference(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \n    >>> least_difference(1, 5, -5)\n    4\n    \"\"\"\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The docstring is a triple-quoted string (which may span multiple lines) that comes immediately after the header of a function.<br> When we call help() on a function, it shows the docstring.","metadata":{}},{"cell_type":"code","source":"help(least_difference)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"> **Aside:** The last two lines of the docstring are an example function call and result. (The `>>>` is a reference to the command <br>prompt used in Python interactive shells.) Python doesn't run the example call - it's just there for the benefit of the reader. <br>The convention of including 1 or more example calls in a function's docstring is far from universally observed, but it can be very<br> effective at helping someone understand your function. For a real-world example, see this docstring for the numpy function <br>`np.eye`.","metadata":{}},{"cell_type":"markdown","source":"Good programmers use docstrings unless they expect to throw away the code soon after it's used (which is rare). So, you should start <br>writing docstrings, too!","metadata":{}},{"cell_type":"markdown","source":"## Functions that don't return\nWhat would happen if we didn't include the `return` keyword in our function?","metadata":{}},{"cell_type":"code","source":"def least_difference(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \"\"\"\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    min(diff1, diff2, diff3)\n    \nprint(\n    least_difference(1, 10, 100),\n    least_difference(1, 10, 10),\n    least_difference(5, 6, 7),\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Python allows us to define such functions. The result of calling them is the special value None. (This is similar to the concept of \"null\" <br>in other languages.)\n\nWithout a `return` statement, `least_difference` is completely pointless, but a function with side effects may do something<br> useful without returning anything. We've already seen two examples of this: `print()` and `help()` don't return anything. We only <br>call them for their side effects (putting some text on the screen). Other examples of useful side effects include writing to a file, or <br>modifying an input.","metadata":{}},{"cell_type":"code","source":"mystery = print()\nprint(mystery)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Default arguments\nWhen we called `help(print)`, we saw that the `print` function has several optional arguments. For example, we can specify a <br>value for `sep` to put some special string in between our printed arguments:","metadata":{}},{"cell_type":"code","source":"print(1, 2, 3, sep=' < ')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"But if we don't specify a value, `sep` is treated as having a default value of ' ' (a single space).","metadata":{}},{"cell_type":"code","source":"print(1, 2, 3)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Adding optional arguments with default values to the functions we define turns out to be pretty easy:","metadata":{}},{"cell_type":"code","source":"def greet(who=\"Colin\"):\n    print(\"Hello,\", who)\n    \ngreet()\ngreet(who=\"Kaggle\")\n# (In this case, we don't need to specify the name of the argument, because it's unambiguous.)\ngreet(\"world\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Functions Applied to FunctionsÂ¶\nHere's something that's powerful, though it can feel very abstract at first. You can supply functions as arguments to other functions. <br>Some example may make this clearer:","metadata":{}},{"cell_type":"code","source":"def mult_by_five(x):\n    return 5 * x\n\ndef call(fn, arg):\n    \"\"\"Call fn on arg\"\"\"\n    return fn(arg)\n\ndef squared_call(fn, arg):\n    \"\"\"Call fn on the result of calling fn on arg\"\"\"\n    return fn(fn(arg))\n\nprint(\n    mult_by_five(2),\n    call(mult_by_five, 1),\n    squared_call(mult_by_five, 1), \n    sep='\\n', # '\\n' is the newline character - it starts a new line\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Functions that operate on other functions are called \"higher-order functions.\" You probably won't write your own for a little while. But <br>there are higher-order functions built into Python that you might find useful to call.\n\nHere's an interesting example using the `max` function.\n\nBy default, `max` returns the largest of its arguments. But if we pass in a function using the optional `key` argument, it returns the <br>argument `x` that maximizes `key(x)` (aka the 'argmax').","metadata":{}},{"cell_type":"code","source":"def mod_5(x):\n    \"\"\"Return the remainder of x after dividing by 5\"\"\"\n    return x % 5\n\nprint(\n    'Which number is biggest?',\n    max(100, 51, 14),\n    'Which number is the biggest modulo 5?',\n    max(100, 51, 14, key=mod_5),\n    sep='\\n',\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Your Turn\nFunctions open up a whole new world in Python programming. Try using them yourself.","metadata":{}},{"cell_type":"markdown","source":"## Exercise: Functions and Getting Help\nThis notebook is an exercise in the Python course. ","metadata":{}},{"cell_type":"markdown","source":"Functions are powerful. Try writing some yourself.\n\nAs before, don't forget to run the setup code below before jumping into question 1.","metadata":{}},{"cell_type":"code","source":"# SETUP. You don't need to worry for now about what this code does or how it works.\nfrom learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex2 import *\nprint('Setup complete.')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 1.\nComplete the body of the following function according to its docstring.\n\nHINT: Python has a built-in function round.","metadata":{}},{"cell_type":"code","source":"#My_Solution\ndef round_to_two_places(num):\n    \"\"\"Return the given number rounded to two decimal places. \n    \n    >>> round_to_two_places(3.14159)\n    3.14\n    \"\"\"\n    help(round)\n    return(round(num, ndigits=2))\n    # Replace this body with your own code.\n    # (\"pass\" is a keyword that does literally nothing. We used it as a placeholder\n    # because after we begin a code block, Python requires at least one line of code)\n    pass\n    \n\n# Check your answer\nq1.check()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 2.\nThe help for `round` says that `ndigits` (the second argument) may be negative. What do you think will happen when it is? Try some examples in the following cell.","metadata":{}},{"cell_type":"code","source":"# Put your test code here\nround(111.42569, ndigits=-2)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":">Solution: As you've seen, ndigits=-1 rounds to the nearest 10, ndigits=-2 rounds to the nearest 100 and so on. Where might this be useful? Suppose we're dealing with large numbers:\n\n>The area of Finland is 338,424 kmÂ²\n>The area of Greenland is 2,166,086 kmÂ²\n\n>We probably don't care whether it's really 338,424, or 338,425, or 338,177. All those digits of accuracy are just distracting. We can chop them off by calling round() with ndigits=-3:\n\n>The area of Finland is 338,000 kmÂ²\nThe area of Greenland is 2,166,000 kmÂ²\n\n>(We'll talk about how we would get the commas later when we talk about string formatting :))","metadata":{}},{"cell_type":"markdown","source":"## 3.\nIn the previous exercise, the candy-sharing friends Alice, Bob and Carol tried to split candies evenly. For the sake of their friendship, any candies left over would be smashed. For example, if they collectively bring home 91 candies, they'll take 30 each and smash 1.\n\nBelow is a simple function that will calculate the number of candies to smash for any number of total candies.\n\nModify it so that it optionally takes a second argument representing the number of friends the candies are being split between. If no second argument is provided, it should assume 3 friends, as before.\n\nUpdate the docstring to reflect this new behaviour.","metadata":{}},{"cell_type":"code","source":"def to_smash(total_candies,number_of_friends=3):\n    \"\"\"Return the number of leftover candies that must be smashed after distributing\n    the given number of candies evenly between 3 friends.\n    \n    >>> to_smash(91)\n    1\n    \"\"\"\n    return total_candies%number_of_friends\n\nto_smash(29,5)\n# Check your answer\n#q3.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T09:51:34.789882Z","iopub.execute_input":"2025-08-08T09:51:34.790303Z","iopub.status.idle":"2025-08-08T09:51:34.798907Z","shell.execute_reply.started":"2025-08-08T09:51:34.790274Z","shell.execute_reply":"2025-08-08T09:51:34.797854Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"4"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"## 4. (Optional)\nIt may not be fun, but reading and understanding error messages will be an important part of your Python career.\n\nEach code cell below contains some commented buggy code. For each cell...\n\n1. Read the code and predict what you think will happen when it's run.\n2. Then uncomment the code and run it to see what happens. (Tip: In the kernel editor, you can highlight several lines and press `ctrl+/` to toggle commenting.)\n3. Fix the code (so that it accomplishes its intended purpose without throwing an exception)","metadata":{}},{"cell_type":"code","source":"def ruound_to_two_places(num):\n    return round(num, ndigits=-1)\nruound_to_two_places(9.9999)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x = -10\ny = 5\n# Which of the two variables above has the smallest absolute value?\nsmallest_abs = min(abs(x), abs(y))\nprint(smallest_abs)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def f(x):\n    y = abs(x)\n    return y\n\nprint(f(-5))","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}